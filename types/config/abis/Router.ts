/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface RouterInterface extends utils.Interface {
  functions: {
    "addLiquidity(address,uint256,address,uint256,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "addLiquidityETH(address,uint256,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "removeLiquidity(address,uint256,address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "removeLiquidityETH(address,uint256,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "removeLiquidityWithPermit(address,uint256,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
    "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
    "swapExactTokensForTokens(uint256,uint256,address[],uint256[],bool[],address,uint256)": FunctionFragment;
    "swapTokensForExactTokens(uint256,uint256,address[],uint256[],bool[],address,uint256)": FunctionFragment;
    "swapExactETHForTokens(uint256,address[],uint256[],bool[],address,uint256)": FunctionFragment;
    "swapTokensForExactETH(uint256,uint256,address[],uint256[],bool[],address,uint256)": FunctionFragment;
    "swapExactTokensForETH(uint256,uint256,address[],uint256[],bool[],address,uint256)": FunctionFragment;
    "swapETHForExactTokens(uint256,address[],uint256[],bool[],address,uint256)": FunctionFragment;
    "quote(uint256,uint112,uint112)": FunctionFragment;
    "getAmountOut(uint256,uint112,uint112)": FunctionFragment;
    "getAmountIn(uint256,uint112,uint112)": FunctionFragment;
    "getAmountsOut(uint256,address[],uint256[],bool[])": FunctionFragment;
    "getAmountsIn(uint256,address[],uint256[],bool[])": FunctionFragment;
    "factory()": FunctionFragment;
    "weth()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addLiquidity"
      | "addLiquidityETH"
      | "removeLiquidity"
      | "removeLiquidityETH"
      | "removeLiquidityWithPermit"
      | "removeLiquidityETHWithPermit"
      | "swapExactTokensForTokens"
      | "swapTokensForExactTokens"
      | "swapExactETHForTokens"
      | "swapTokensForExactETH"
      | "swapExactTokensForETH"
      | "swapETHForExactTokens"
      | "quote"
      | "getAmountOut"
      | "getAmountIn"
      | "getAmountsOut"
      | "getAmountsIn"
      | "factory"
      | "weth"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityETH",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityETH",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityWithPermit",
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      boolean,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityETHWithPermit",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      boolean,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokens",
    values: [
      BigNumberish,
      BigNumberish,
      string[],
      BigNumberish[],
      boolean[],
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactTokens",
    values: [
      BigNumberish,
      BigNumberish,
      string[],
      BigNumberish[],
      boolean[],
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactETHForTokens",
    values: [
      BigNumberish,
      string[],
      BigNumberish[],
      boolean[],
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactETH",
    values: [
      BigNumberish,
      BigNumberish,
      string[],
      BigNumberish[],
      boolean[],
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForETH",
    values: [
      BigNumberish,
      BigNumberish,
      string[],
      BigNumberish[],
      boolean[],
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapETHForExactTokens",
    values: [
      BigNumberish,
      string[],
      BigNumberish[],
      boolean[],
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quote",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountIn",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsOut",
    values: [BigNumberish, string[], BigNumberish[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsIn",
    values: [BigNumberish, string[], BigNumberish[], boolean[]]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityETHWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactETHForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapETHForExactTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {};
}

export interface Router extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLiquidity(
      _tokenA: string,
      _tokenAId: BigNumberish,
      _tokenB: string,
      _amountADesired: BigNumberish,
      _amountBDesired: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addLiquidityETH(
      _token: string,
      _tokenId: BigNumberish,
      _amountTokenDesired: BigNumberish,
      _amountTokenMin: BigNumberish,
      _amountETHMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      _tokenA: string,
      _tokenAId: BigNumberish,
      _tokenB: string,
      _liquidity: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeLiquidityETH(
      _token: string,
      _tokenId: BigNumberish,
      _liquidity: BigNumberish,
      _amountTokenMin: BigNumberish,
      _amountETHMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeLiquidityWithPermit(
      _tokenA: string,
      _tokenAId: BigNumberish,
      _tokenB: string,
      _liquidity: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      _approveMax: boolean,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeLiquidityETHWithPermit(
      _token: string,
      _tokenId: BigNumberish,
      _liquidity: BigNumberish,
      _amountTokenMin: BigNumberish,
      _amountETHMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      _approveMax: boolean,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapExactTokensForTokens(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapTokensForExactTokens(
      _amountOut: BigNumberish,
      _amountInMax: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapExactETHForTokens(
      _amountOutMin: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapTokensForExactETH(
      _amountOut: BigNumberish,
      _amountInMax: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapExactTokensForETH(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapETHForExactTokens(
      _amountOut: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    quote(
      _amountA: BigNumberish,
      _reserveA: BigNumberish,
      _reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAmountOut(
      _amountIn: BigNumberish,
      _reserveIn: BigNumberish,
      _reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAmountIn(
      _amountOut: BigNumberish,
      _reserveIn: BigNumberish,
      _reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAmountsOut(
      _amountIn: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getAmountsIn(
      _amountOut: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;
  };

  addLiquidity(
    _tokenA: string,
    _tokenAId: BigNumberish,
    _tokenB: string,
    _amountADesired: BigNumberish,
    _amountBDesired: BigNumberish,
    _amountAMin: BigNumberish,
    _amountBMin: BigNumberish,
    _to: string,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addLiquidityETH(
    _token: string,
    _tokenId: BigNumberish,
    _amountTokenDesired: BigNumberish,
    _amountTokenMin: BigNumberish,
    _amountETHMin: BigNumberish,
    _to: string,
    _deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    _tokenA: string,
    _tokenAId: BigNumberish,
    _tokenB: string,
    _liquidity: BigNumberish,
    _amountAMin: BigNumberish,
    _amountBMin: BigNumberish,
    _to: string,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeLiquidityETH(
    _token: string,
    _tokenId: BigNumberish,
    _liquidity: BigNumberish,
    _amountTokenMin: BigNumberish,
    _amountETHMin: BigNumberish,
    _to: string,
    _deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeLiquidityWithPermit(
    _tokenA: string,
    _tokenAId: BigNumberish,
    _tokenB: string,
    _liquidity: BigNumberish,
    _amountAMin: BigNumberish,
    _amountBMin: BigNumberish,
    _to: string,
    _deadline: BigNumberish,
    _approveMax: boolean,
    _v: BigNumberish,
    _r: BytesLike,
    _s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeLiquidityETHWithPermit(
    _token: string,
    _tokenId: BigNumberish,
    _liquidity: BigNumberish,
    _amountTokenMin: BigNumberish,
    _amountETHMin: BigNumberish,
    _to: string,
    _deadline: BigNumberish,
    _approveMax: boolean,
    _v: BigNumberish,
    _r: BytesLike,
    _s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapExactTokensForTokens(
    _amountIn: BigNumberish,
    _amountOutMin: BigNumberish,
    _path: string[],
    _tokenIds: BigNumberish[],
    _isERC1155: boolean[],
    _to: string,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapTokensForExactTokens(
    _amountOut: BigNumberish,
    _amountInMax: BigNumberish,
    _path: string[],
    _tokenIds: BigNumberish[],
    _isERC1155: boolean[],
    _to: string,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapExactETHForTokens(
    _amountOutMin: BigNumberish,
    _path: string[],
    _tokenIds: BigNumberish[],
    _isERC1155: boolean[],
    _to: string,
    _deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapTokensForExactETH(
    _amountOut: BigNumberish,
    _amountInMax: BigNumberish,
    _path: string[],
    _tokenIds: BigNumberish[],
    _isERC1155: boolean[],
    _to: string,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapExactTokensForETH(
    _amountIn: BigNumberish,
    _amountOutMin: BigNumberish,
    _path: string[],
    _tokenIds: BigNumberish[],
    _isERC1155: boolean[],
    _to: string,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapETHForExactTokens(
    _amountOut: BigNumberish,
    _path: string[],
    _tokenIds: BigNumberish[],
    _isERC1155: boolean[],
    _to: string,
    _deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  quote(
    _amountA: BigNumberish,
    _reserveA: BigNumberish,
    _reserveB: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountOut(
    _amountIn: BigNumberish,
    _reserveIn: BigNumberish,
    _reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountIn(
    _amountOut: BigNumberish,
    _reserveIn: BigNumberish,
    _reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountsOut(
    _amountIn: BigNumberish,
    _path: string[],
    _tokenIds: BigNumberish[],
    _isERC1155: boolean[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAmountsIn(
    _amountOut: BigNumberish,
    _path: string[],
    _tokenIds: BigNumberish[],
    _isERC1155: boolean[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  factory(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addLiquidity(
      _tokenA: string,
      _tokenAId: BigNumberish,
      _tokenB: string,
      _amountADesired: BigNumberish,
      _amountBDesired: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    addLiquidityETH(
      _token: string,
      _tokenId: BigNumberish,
      _amountTokenDesired: BigNumberish,
      _amountTokenMin: BigNumberish,
      _amountETHMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    removeLiquidity(
      _tokenA: string,
      _tokenAId: BigNumberish,
      _tokenB: string,
      _liquidity: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    removeLiquidityETH(
      _token: string,
      _tokenId: BigNumberish,
      _liquidity: BigNumberish,
      _amountTokenMin: BigNumberish,
      _amountETHMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    removeLiquidityWithPermit(
      _tokenA: string,
      _tokenAId: BigNumberish,
      _tokenB: string,
      _liquidity: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      _approveMax: boolean,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    removeLiquidityETHWithPermit(
      _token: string,
      _tokenId: BigNumberish,
      _liquidity: BigNumberish,
      _amountTokenMin: BigNumberish,
      _amountETHMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      _approveMax: boolean,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    swapExactTokensForTokens(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapTokensForExactTokens(
      _amountOut: BigNumberish,
      _amountInMax: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapExactETHForTokens(
      _amountOutMin: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapTokensForExactETH(
      _amountOut: BigNumberish,
      _amountInMax: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapExactTokensForETH(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapETHForExactTokens(
      _amountOut: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    quote(
      _amountA: BigNumberish,
      _reserveA: BigNumberish,
      _reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      _amountIn: BigNumberish,
      _reserveIn: BigNumberish,
      _reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountIn(
      _amountOut: BigNumberish,
      _reserveIn: BigNumberish,
      _reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsOut(
      _amountIn: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAmountsIn(
      _amountOut: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    factory(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addLiquidity(
      _tokenA: string,
      _tokenAId: BigNumberish,
      _tokenB: string,
      _amountADesired: BigNumberish,
      _amountBDesired: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addLiquidityETH(
      _token: string,
      _tokenId: BigNumberish,
      _amountTokenDesired: BigNumberish,
      _amountTokenMin: BigNumberish,
      _amountETHMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    removeLiquidity(
      _tokenA: string,
      _tokenAId: BigNumberish,
      _tokenB: string,
      _liquidity: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeLiquidityETH(
      _token: string,
      _tokenId: BigNumberish,
      _liquidity: BigNumberish,
      _amountTokenMin: BigNumberish,
      _amountETHMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    removeLiquidityWithPermit(
      _tokenA: string,
      _tokenAId: BigNumberish,
      _tokenB: string,
      _liquidity: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      _approveMax: boolean,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeLiquidityETHWithPermit(
      _token: string,
      _tokenId: BigNumberish,
      _liquidity: BigNumberish,
      _amountTokenMin: BigNumberish,
      _amountETHMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      _approveMax: boolean,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swapExactTokensForTokens(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swapTokensForExactTokens(
      _amountOut: BigNumberish,
      _amountInMax: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swapExactETHForTokens(
      _amountOutMin: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    swapTokensForExactETH(
      _amountOut: BigNumberish,
      _amountInMax: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swapExactTokensForETH(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swapETHForExactTokens(
      _amountOut: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    quote(
      _amountA: BigNumberish,
      _reserveA: BigNumberish,
      _reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      _amountIn: BigNumberish,
      _reserveIn: BigNumberish,
      _reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountIn(
      _amountOut: BigNumberish,
      _reserveIn: BigNumberish,
      _reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsOut(
      _amountIn: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsIn(
      _amountOut: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      _tokenA: string,
      _tokenAId: BigNumberish,
      _tokenB: string,
      _amountADesired: BigNumberish,
      _amountBDesired: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addLiquidityETH(
      _token: string,
      _tokenId: BigNumberish,
      _amountTokenDesired: BigNumberish,
      _amountTokenMin: BigNumberish,
      _amountETHMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      _tokenA: string,
      _tokenAId: BigNumberish,
      _tokenB: string,
      _liquidity: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeLiquidityETH(
      _token: string,
      _tokenId: BigNumberish,
      _liquidity: BigNumberish,
      _amountTokenMin: BigNumberish,
      _amountETHMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeLiquidityWithPermit(
      _tokenA: string,
      _tokenAId: BigNumberish,
      _tokenB: string,
      _liquidity: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      _approveMax: boolean,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeLiquidityETHWithPermit(
      _token: string,
      _tokenId: BigNumberish,
      _liquidity: BigNumberish,
      _amountTokenMin: BigNumberish,
      _amountETHMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      _approveMax: boolean,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokens(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapTokensForExactTokens(
      _amountOut: BigNumberish,
      _amountInMax: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapExactETHForTokens(
      _amountOutMin: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapTokensForExactETH(
      _amountOut: BigNumberish,
      _amountInMax: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForETH(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapETHForExactTokens(
      _amountOut: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    quote(
      _amountA: BigNumberish,
      _reserveA: BigNumberish,
      _reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountOut(
      _amountIn: BigNumberish,
      _reserveIn: BigNumberish,
      _reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountIn(
      _amountOut: BigNumberish,
      _reserveIn: BigNumberish,
      _reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsOut(
      _amountIn: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsIn(
      _amountOut: BigNumberish,
      _path: string[],
      _tokenIds: BigNumberish[],
      _isERC1155: boolean[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
