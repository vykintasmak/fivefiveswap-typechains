/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface FactoryInterface extends utils.Interface {
  functions: {
    "getPair(address,uint256,address)": FunctionFragment;
    "allPairsLength()": FunctionFragment;
    "createPair(address,uint256,address)": FunctionFragment;
    "setFeeTo(address)": FunctionFragment;
    "setExchangeTemplate(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "exchangeTemplate()": FunctionFragment;
    "feeTo()": FunctionFragment;
    "owner()": FunctionFragment;
    "allPairs(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getPair"
      | "allPairsLength"
      | "createPair"
      | "setFeeTo"
      | "setExchangeTemplate"
      | "setOwner"
      | "exchangeTemplate"
      | "feeTo"
      | "owner"
      | "allPairs"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getPair",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "allPairsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPair",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "setFeeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setExchangeTemplate",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "exchangeTemplate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeTo", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allPairs",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allPairsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFeeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setExchangeTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allPairs", data: BytesLike): Result;

  events: {
    "PairCreated(address,uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PairCreated"): EventFragment;
}

export interface PairCreatedEventObject {
  token0: string;
  token0Id: BigNumber;
  token1: string;
  pair: string;
}
export type PairCreatedEvent = TypedEvent<
  [string, BigNumber, string, string],
  PairCreatedEventObject
>;

export type PairCreatedEventFilter = TypedEventFilter<PairCreatedEvent>;

export interface Factory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getPair(
      _tokenA: string,
      _tokenAId: BigNumberish,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allPairsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    createPair(
      _tokenA: string,
      _tokenAId: BigNumberish,
      _tokenB: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setExchangeTemplate(
      _exchangeTemplate: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setOwner(
      _newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    exchangeTemplate(overrides?: CallOverrides): Promise<[string]>;

    feeTo(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  getPair(
    _tokenA: string,
    _tokenAId: BigNumberish,
    _tokenB: string,
    overrides?: CallOverrides
  ): Promise<string>;

  allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

  createPair(
    _tokenA: string,
    _tokenAId: BigNumberish,
    _tokenB: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeeTo(
    _feeTo: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setExchangeTemplate(
    _exchangeTemplate: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setOwner(
    _newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  exchangeTemplate(overrides?: CallOverrides): Promise<string>;

  feeTo(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getPair(
      _tokenA: string,
      _tokenAId: BigNumberish,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<string>;

    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    createPair(
      _tokenA: string,
      _tokenAId: BigNumberish,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<string>;

    setFeeTo(_feeTo: string, overrides?: CallOverrides): Promise<void>;

    setExchangeTemplate(
      _exchangeTemplate: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(_newOwner: string, overrides?: CallOverrides): Promise<void>;

    exchangeTemplate(overrides?: CallOverrides): Promise<string>;

    feeTo(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "PairCreated(address,uint256,address,address)"(
      token0?: string | null,
      token0Id?: BigNumberish | null,
      token1?: string | null,
      pair?: null
    ): PairCreatedEventFilter;
    PairCreated(
      token0?: string | null,
      token0Id?: BigNumberish | null,
      token1?: string | null,
      pair?: null
    ): PairCreatedEventFilter;
  };

  estimateGas: {
    getPair(
      _tokenA: string,
      _tokenAId: BigNumberish,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    createPair(
      _tokenA: string,
      _tokenAId: BigNumberish,
      _tokenB: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setExchangeTemplate(
      _exchangeTemplate: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setOwner(
      _newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    exchangeTemplate(overrides?: CallOverrides): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    allPairs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getPair(
      _tokenA: string,
      _tokenAId: BigNumberish,
      _tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allPairsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPair(
      _tokenA: string,
      _tokenAId: BigNumberish,
      _tokenB: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setExchangeTemplate(
      _exchangeTemplate: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setOwner(
      _newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    exchangeTemplate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allPairs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
